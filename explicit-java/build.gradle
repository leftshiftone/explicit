/*
 * Copyright (c) 2016-2020, Leftshift One
 * __________________
 * [2019] Leftshift One
 * All Rights Reserved.
 * NOTICE:  All information contained herein is, and remains
 * the property of Leftshift One and its suppliers,
 * if any.  The intellectual and technical concepts contained
 * herein are proprietary to Leftshift One
 * and its suppliers and may be covered by Patents,
 * patents in process, and are protected by trade secret or copyright law.
 * Dissemination of this information or reproduction of this material
 * is strictly forbidden unless prior written permission is obtained
 * from Leftshift One.
 */

apply plugin: "kotlin"
apply plugin: "org.jetbrains.dokka"
apply plugin: "com.jfrog.bintray"
apply plugin: "one.leftshift.asteria-dependency"
apply plugin: "one.leftshift.asteria-publish"
apply plugin: "one.leftshift.asteria-version"

dependencies {
    compile "org.antlr:antlr4-runtime:4.7.2"
    implementation "org.slf4j:slf4j-api:1.7.28"
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8"
    implementation "org.jetbrains.kotlin:kotlin-reflect"

    testCompile "org.junit.jupiter:junit-jupiter-engine"
    testCompile "org.assertj:assertj-core"
}

sourceSets.main.java.srcDirs += new File(buildDir, "generated-src/antlr")
classes.dependsOn rootProject.tasks.generateGrammarSourceJava

task dokkaJavadoc(type: org.jetbrains.dokka.gradle.DokkaTask) {
    outputFormat = "javadoc"
    outputDirectory = "${buildDir}/dokkaJavadoc"
}

task javadocJar(type: Jar) {
    from dokkaJavadoc
    classifier "javadoc"
}

test {
    useJUnitPlatform()
}

archivesBaseName = rootProject.name
artifacts {
    archives sourceJar
    archives javadocJar
}
publishing {
    publications {
        mavenJava(MavenPublication) {
            artifactId rootProject.name
            from components.java
            artifact sourceJar
            artifact javadocJar
            pom.withXml {
                Node root = asNode()
                root.appendNode("name", "Explicit")
                root.appendNode("description", "Explicit is a cross platform library for rule based named entity recognition.")
                root.appendNode("url", "https://github.com/leftshiftone/explicit")

                Node licenses = root.appendNode("licenses")
                Node license = licenses.appendNode("license")
                license.appendNode("name", "MIT")
                license.appendNode("url", "https://github.com/leftshiftone/explicit/blob/master/LICENSE")

                Node developers = root.appendNode("developers")
                Node developer = developers.appendNode("developer")
                developer.appendNode("id", "leftshiftone")
                developer.appendNode("name", "Leftshift One")
                developer.appendNode("email", "contact@leftshift.one")
                developer.appendNode("organization", "Leftshift One Software GmbH")
                developer.appendNode("organizationUrl", "https://www.leftshift.one")

                Node scm = root.appendNode("scm")
                scm.appendNode("connection", "scm:git:git://github.com/leftshiftone/explicit.git")
                scm.appendNode("developerConnection", "scm:git:ssh://github.com:leftshiftone/explicit.git")
                scm.appendNode("url", "https://github.com/leftshiftone/explicit")
            }
        }
    }
}

bintray {
    logger.info "Bintray deploy with user [${System.getenv('BINTRAY_USER')}] while working on ${project.name}"
    user = System.getenv('BINTRAY_USER')
    key = System.getenv('BINTRAY_KEY')
    publish = true
    override = true
    pkg {
        repo = "explicit"
        name = "${project.group}.${project.name}"
        userOrg = "leftshiftone"
        licenses = ["MIT"]
        vcsUrl = "https://github.com/leftshiftone/explicit.git"
        publications = ["mavenJava"]
    }
}

