import groovy.json.JsonBuilder
import groovy.json.JsonSlurper
import groovy.util.Node

import java.util.regex.Matcher
import java.util.regex.Pattern

buildscript {
    ext {
        kotlinVersion = "1.3.41"
    }
    repositories {
        jcenter()
    }
    dependencies {
        classpath "one.leftshift.asteria:asteria-code-analytics:latest.release"
        classpath "one.leftshift.asteria:asteria-dependency:latest.release"
        classpath "one.leftshift.asteria:asteria-docs:latest.release"
        classpath "one.leftshift.asteria:asteria-email:latest.release"
        classpath "one.leftshift.asteria:asteria-publish:latest.release"
        classpath "one.leftshift.asteria:asteria-report:latest.release"
        classpath "one.leftshift.asteria:asteria-version:latest.release"
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlinVersion"
        classpath "org.jetbrains.kotlin:kotlin-allopen:$kotlinVersion"
        classpath "org.jetbrains.dokka:dokka-gradle-plugin:0.9.17"
        classpath "com.jfrog.bintray.gradle:gradle-bintray-plugin:1.8.4"
    }
}

apply plugin: "antlr"
apply plugin: "kotlin"
apply plugin: "one.leftshift.asteria-email"
apply plugin: "one.leftshift.asteria-report"
apply plugin: "one.leftshift.asteria-publish"
apply plugin: "one.leftshift.asteria-dependency"
apply plugin: "one.leftshift.asteria-version"

apply plugin: "com.jfrog.bintray"

asteriaEmail {
    smtpHost = System.getenv("ASTERIA_EMAIL_SMTP_HOST")
    smptUser = System.getenv("ASTERIA_EMAIL_SMTP_USER")
    smptPassword = System.getenv("ASTERIA_EMAIL_SMTP_PASSWORD")
    sender = System.getenv("ASTERIA_EMAIL_SENDER")
}

asteriaReport {
    reportingUrl = System.getenv("ASTERIA_REPORT_URL")
    depsJsonResult = file("${rootProject.buildDir}/dependencyUpdates/report.json")
    junitXmlResults = fileTree(rootProject.projectDir) {
        include(
                "**/test-results/*/TEST-*.xml",
                "**/explicit-python/build/test/TEST-*.xml"
        )
    }
    junitBinaryResults = files(["test"].collect {
        "${project.buildDir}/test-results/${it}/binary"
    })
}

asteriaPublish {
    enableBranchSnapshotRepositories = false
}

asteriaDependency {
    enableBranchSnapshotRepositories = true
}
dependencyManagement {
    imports {
        mavenBom("org.springframework.boot:spring-boot-dependencies:2.1.13.RELEASE") {
            bomProperty("kotlin.version", kotlinVersion)
        }
    }
    dependencies {
        dependency "org.apache.velocity:velocity-engine-core:2.1"
    }
}

if (System.getenv("CI")) {
    afterEvaluate { rootProject.tasks.postRelease.finalizedBy rootProject.tasks.sendReleaseEmail }
    if (tasks.findByName("publish")) {
        afterEvaluate { rootProject.tasks.postRelease.dependsOn tasks.publish }
    }
}

repositories {
    jcenter()
    maven {
        credentials(AwsCredentials) {
            accessKey gradle.awsAccessKey
            secretKey gradle.awsSecretKey
        }
        url gradle.releasesRepositoryUrl
    }
    maven {
        credentials(AwsCredentials) {
            accessKey gradle.awsAccessKey
            secretKey gradle.awsSecretKey
        }
        url gradle.snapshotsRepositoryUrl
    }
}

dependencies {
    antlr "org.antlr:antlr4:4.7.2" // use ANTLR version 4

    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlinVersion"
    implementation "org.jetbrains.kotlin:kotlin-reflect:$kotlinVersion"
    implementation "org.apache.velocity:velocity-engine-core"

    testImplementation "org.junit.jupiter:junit-jupiter"
    testImplementation "org.assertj:assertj-core"
}

test {
    useJUnitPlatform()
}

sourceSets.main.java.srcDirs += new File(buildDir, "generated-src/antlr")
generateGrammarSource {
    outputDirectory = new File(project.rootDir, "explicit-java/build/generated-src/antlr/explicit/antlr")
    arguments += ["-visitor", "-package", "explicit.antlr"]
}
compileKotlin.dependsOn generateGrammarSource

task generateSource(type: Test) {
    useJUnitPlatform()
    filter {
        includeTestsMatching "gaia.sdk.codegen.KotlinCodegenTest"
    }
}
generateSource.dependsOn generateGrammarSource


subprojects {
    apply plugin: "one.leftshift.asteria-code-analytics"

    asteriaCodeAnalytics {
        sonarUrl = System.getenv("SONAR_HOST_URL")
        sonarLoginToken = System.getenv("SONAR_LOGIN")
        xmlCoverageReportEnabled = true
        sonarProperties = [
                "sonar.test.inclusions"           : "**/*Test.*,**/*.test.ts,**/tests/test_*.py",
                "sonar.python.coverage.reportPath": "${project(":explicit-python").projectDir}/build/coverage/coverage.xml",
        ]
        coverageExcludes = ["**/*Kt.class"]
    }
}

task setVersionPython() {
    doLast {
        String pyprojectTomlPath = project(":explicit-python").projectDir.toString() + "/pyproject.toml"
        File pyprojectTomlFile = file(pyprojectTomlPath)
        String pyprojectTomlContent = pyprojectTomlFile.text

        Pattern regex = Pattern.compile("^version\\s?=\\s?[\"'].*[\"']\\s?\$", Pattern.MULTILINE)
        Matcher matcher = regex.matcher(pyprojectTomlContent)
        List<String> matches = []
        while (matcher.find()) {
            matches.add(matcher.group(0))
        }
        if (matches.size() > 1)
            throw new RuntimeException("More than one version found in ${pyprojectTomlPath}")
        if (matches.isEmpty() || matches.first().trim().isEmpty())
            throw new RuntimeException("No version found in ${pyprojectTomlPath}")
        pyprojectTomlFile.text = pyprojectTomlContent.replaceAll(matches.first(), "version = \"${version.toString()}\"")
        logger.quiet("Updated version in ${pyprojectTomlPath} to ${version.toString()}")
    }
}
task commitVersions() {
    doLast {
        // python
        String pyprojectTomlPath = "${project(":explicit-python").projectDir}/pyproject.toml"
        executeAssertExitCode(["git", "add", pyprojectTomlPath])

        String commitMessage = "set version to ${version.toString()}"
        executeWarnExitCode(["git", "commit", "-m", "'$commitMessage'".toString()])
    }
}
commitVersions.dependsOn setVersionPython

task pushVersions() {
    doLast {
        executeAssertExitCode(["git", "push"])
    }
}
pushVersions.dependsOn commitVersions
if (System.getenv("CI") == null || System.getenv("CI") != "true") {
    afterEvaluate { rootProject.tasks.release.dependsOn rootProject.tasks.pushVersions }
}

private void executeAssertExitCode(List<String> command) {
    int exitCode = execute(command)
    if (exitCode != 0) throw new RuntimeException("Command '${command.join(" ")}' failed with code ${exitCode}")
    logger.debug("Executed command '${command.join(" ")}'")
}

private void executeWarnExitCode(List<String> command) {
    int exitCode = execute(command)
    if (exitCode != 0) logger.warn("Command failed with code ${exitCode}")
    logger.debug("Executed command '${command.join(" ")}'")
}

private int execute(List<String> command) {
    logger.debug("Executing command '${command.join(" ")}'")
    def process = new ProcessBuilder(command).directory(projectDir).start()
    process.consumeProcessOutput(System.out, System.err)
    process.waitFor()
    logger.debug("Executed command '${command.join(" ")}'")
    return process.exitValue()
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifactId = project.name
            from components.java
            pom.withXml {
                Node root = asNode()
                root.appendNode("name", "GAIA SDK")
                root.appendNode("description", "GAIA SDK is an open source software library in order to interact with the GAIA API.")
                root.appendNode("url", "https://github.com/leftshiftone/explicit")

                Node licenses = root.appendNode("licenses")
                Node license = licenses.appendNode("license")
                license.appendNode("name", "MIT")
                license.appendNode("url", "https://github.com/leftshiftone/explicit/blob/master/LICENSE")

                Node developers = root.appendNode("developers")
                Node developer = developers.appendNode("developer")
                developer.appendNode("id", "leftshiftone")
                developer.appendNode("name", "Leftshift One")
                developer.appendNode("email", "contact@leftshift.one")
                developer.appendNode("organization", "Leftshift One Software GmbH")
                developer.appendNode("organizationUrl", "https://www.leftshift.one")

                Node scm = root.appendNode("scm")
                scm.appendNode("connection", "scm:git:git://github.com/leftshiftone/explicit.git")
                scm.appendNode("developerConnection", "scm:git:ssh://github.com:leftshiftone/explicit.git")
                scm.appendNode("url", "https://github.com/leftshiftone/explicit")
            }
        }
    }
}

bintray {
    logger.info "Bintray deploy with user [${System.getenv('BINTRAY_USER')}] while working on ${project.name}"
    user = System.getenv('BINTRAY_USER')
    key = System.getenv('BINTRAY_KEY')
    publish = true
    override = true
    pkg {
        repo = "explicit"
        name = "${project.group}.${project.name}"
        userOrg = "leftshiftone"
        licenses = ["MIT"]
        vcsUrl = "https://github.com/leftshiftone/explicit.git"
        publications = ["mavenJava"]
    }
}

if (System.getenv("CI")) {
    publish.finalizedBy bintrayUpload
}

if (System.getenv("CI") == null || System.getenv("CI") != "true") {
    tasks.release.dependsOn tasks.generateLock
    tasks.release.dependsOn tasks.saveLock
    tasks.release.dependsOn tasks.persistDependencyLock
}
